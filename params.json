{
  "name": "BeCALBot",
  "tagline": "Proyecto de la asignatura \"Cloud Computing: Fundamentos e Infraestructura\" del Máster Universitario en Ingeniería Informática de la ETSIIT, UGr",
  "body": "# MII-CC16-17\r\nProyecto de la asignatura **Cloud Computing: Fundamentos e Infraestructura** del Máster Universitario en Ingeniería Informática de la ETSIIT, UGr\r\n\r\nActualizado el 23/11/2016\r\n\r\n# becalbot : Bot de Telegram para la gestión de requerimientos \r\nConsiste en el despliegue de un **bot de telegram**, para lo que utilizaremos *pyTelegramBotAPI*, una API para realizar bots en Telegram.\r\n\r\n## Para qué\r\nEste bot apoyará a las gestiones de requerimientos de un ente gubernamental del Paraguay: [*El Programa Nacional de Becas en el Exterior para el Fortalecimiento de la Investigación, la Innovación y la Educación del Paraguay Don Carlos Antonio López*](http://www.becal.gov.py/). \r\n\r\n## Por qué\r\nActualmente, debido al gran número de beneficiarios del programa gubernamental, se hace díficil poder gestionar las solicitudes de requerimientos en tiempo y en forma de todos ellos. Estas solicitudes se realizan vía e-mail, incluso la confirmación de recepción de las mismas lleva días, por lo que su resolución y respuesta muchos días más, por lo tanto un bot que gestione y administre estos requerimientos resulta útil.\r\n\r\n# Tecnología\r\n## Arquitectura\r\nEn principio utilizaremos la arquitectura basada en microservicios, donde estos son independientes entre si y por lo tanto, pueden ser desarrollados, desplegados y testeados de manera indiviual. Es deseable que el bot funcionará como API, donde el usuario se comunicara con el bot lo más natural posible.\r\n\r\n## Microservicios\r\nEs ideal contar con al menos estos dos microservicios:\r\n\r\n### Gestión de solicitudes \r\nAlmacenará información sobre los detalles de las solicitudes y su estado, utilizaremos una base de datos Relacional u Objeto/Relacional (como MySQL o PostgreSQL) con Python.\r\n\r\n### Gestión de tareas\r\nAdministrará el avance y resolución de los requerimientos solicitados al bot, podría ser una web simple o responsiva en HTML, CSS y JS, con una base de datos Orientada a Objetos u Objeto/Relacional (como MongoDB o PostgreSQL)\r\n\r\n#Provisionamiento\r\n\r\n##¿Dónde? \r\n- Ubuntu Server 16.04 en AWS (Amazon Web Services) para la *Gestión de solicitudes*\r\n- Ubuntu Server 14.04 también en AWS para la *Gestión de tareas*.\r\n\r\n##¿Por qué dos instancias?\r\nEn la experiencia, la arquitectura de microservicios así lo sugiere, entonces decidí priorizar una instancia para cada servicio, para que puedan trabajar totalmente independientes.\r\n\r\n##¿Por qué AWS y Ubuntu Server?\r\nAWS ofrece alternativas gratuitas y de bajo coste para estudiantes de la universidad y usuarios de github, además es la pionera en este ámbito y unas de las más utilizadas. Ubuntu Server, tanto para su versión 14.04 como 16.04, es una distribución Linux muy popular y existe mucha documentación para casi cualquier cosa que se desee hacer.\r\n\r\n##Sistema de provisionamiento\r\n\r\n###Ansible\r\nSu elección se basa en que este sistema Ansible funciona sobre Python (instalado por defecto en la mayoría de las imágenes), es muy práctico en su uso y posee el apoyo de Red Hat Inc.\r\n\r\n###Chef\r\nChef es muy utilizado hoy día, incluso posee una comunidad muy activa. Al utilizarlo resulta bastante sencillo, aunque puede terminar resultando no muy práctico por su sistema de directorios, propios de usuarios más sotisficados.\r\n\r\n###¿Cómo provisionar?\r\n+ Paquetes: Git, MongoDB, NodeJS, ndm; y con ndm: Mongoose.\r\n  - Imagen de Ubuntu Server 14.04 sobre AWS, para Ansible clic [aquí](https://github.com/mmaguero/MII-CC16-17/tree/master/provision/ubuntu14.04/ansible), para Chef [aquí](https://github.com/mmaguero/MII-CC16-17/tree/master/provision/ubuntu14.04/chef). \r\n+ Paquetes: Git, PostgreSQL, pip; y con pip: Flask, FLask-SQLAlchemy, pyTelegramBotAPI.\r\n  - Imagen de Ubuntu Server 16.04 sobre AWS, para Ansible clic [aquí](https://github.com/mmaguero/MII-CC16-17/tree/master/provision/ubuntu16.04/ansible), para Chef [aquí](https://github.com/mmaguero/MII-CC16-17/tree/master/provision/ubuntu16.04/chef). \r\n\r\n## Licencia\r\nGNU GENERAL PUBLIC LICENSE (Versión 3, 29 de Junio de 2007).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}